# **********************************************************************
#
# Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.5.1
#
# <auto-generated>
#
# Generated from file `MediaFile.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module MediaFile
_M_MediaFile = Ice.openModule('MediaFile')
__name__ = 'MediaFile'

if '_t_ByteString' not in _M_MediaFile.__dict__:
    _M_MediaFile._t_ByteString = IcePy.defineSequence('::MediaFile::ByteString', (), IcePy._t_byte)

if '_t_FFMPEGParamsMap' not in _M_MediaFile.__dict__:
    _M_MediaFile._t_FFMPEGParamsMap = IcePy.defineDictionary('::MediaFile::FFMPEGParamsMap', (), IcePy._t_string, IcePy._t_string)

if 'FileTransfer' not in _M_MediaFile.__dict__:
    _M_MediaFile.FileTransfer = Ice.createTempClass()
    class FileTransfer(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_MediaFile.FileTransfer:
                raise RuntimeError('MediaFile.FileTransfer is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::MediaFile::FileTransfer')

        def ice_id(self, current=None):
            return '::MediaFile::FileTransfer'

        def ice_staticId():
            return '::MediaFile::FileTransfer'
        ice_staticId = staticmethod(ice_staticId)

        def send(self, filename, offset, bytes, current=None):
            pass

        def removeFile(self, filename, current=None):
            pass

        def isFileExists(self, filename, current=None):
            pass

        def convertToMp4(self, filename, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_MediaFile._t_FileTransfer)

        __repr__ = __str__

    _M_MediaFile.FileTransferPrx = Ice.createTempClass()
    class FileTransferPrx(Ice.ObjectPrx):

        def send(self, filename, offset, bytes, _ctx=None):
            return _M_MediaFile.FileTransfer._op_send.invoke(self, ((filename, offset, bytes), _ctx))

        def begin_send(self, filename, offset, bytes, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_MediaFile.FileTransfer._op_send.begin(self, ((filename, offset, bytes), _response, _ex, _sent, _ctx))

        def end_send(self, _r):
            return _M_MediaFile.FileTransfer._op_send.end(self, _r)

        def removeFile(self, filename, _ctx=None):
            return _M_MediaFile.FileTransfer._op_removeFile.invoke(self, ((filename, ), _ctx))

        def begin_removeFile(self, filename, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_MediaFile.FileTransfer._op_removeFile.begin(self, ((filename, ), _response, _ex, _sent, _ctx))

        def end_removeFile(self, _r):
            return _M_MediaFile.FileTransfer._op_removeFile.end(self, _r)

        def isFileExists(self, filename, _ctx=None):
            return _M_MediaFile.FileTransfer._op_isFileExists.invoke(self, ((filename, ), _ctx))

        def begin_isFileExists(self, filename, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_MediaFile.FileTransfer._op_isFileExists.begin(self, ((filename, ), _response, _ex, _sent, _ctx))

        def end_isFileExists(self, _r):
            return _M_MediaFile.FileTransfer._op_isFileExists.end(self, _r)

        def convertToMp4(self, filename, _ctx=None):
            return _M_MediaFile.FileTransfer._op_convertToMp4.invoke(self, ((filename, ), _ctx))

        def begin_convertToMp4(self, filename, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_MediaFile.FileTransfer._op_convertToMp4.begin(self, ((filename, ), _response, _ex, _sent, _ctx))

        def end_convertToMp4(self, _r):
            return _M_MediaFile.FileTransfer._op_convertToMp4.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_MediaFile.FileTransferPrx.ice_checkedCast(proxy, '::MediaFile::FileTransfer', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_MediaFile.FileTransferPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_MediaFile._t_FileTransferPrx = IcePy.defineProxy('::MediaFile::FileTransfer', FileTransferPrx)

    _M_MediaFile._t_FileTransfer = IcePy.defineClass('::MediaFile::FileTransfer', FileTransfer, -1, (), True, False, None, (), ())
    FileTransfer._ice_type = _M_MediaFile._t_FileTransfer

    FileTransfer._op_send = IcePy.Operation('send', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), _M_MediaFile._t_ByteString, False, 0)), (), None, ())
    FileTransfer._op_removeFile = IcePy.Operation('removeFile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    FileTransfer._op_isFileExists = IcePy.Operation('isFileExists', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    FileTransfer._op_convertToMp4 = IcePy.Operation('convertToMp4', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())

    _M_MediaFile.FileTransfer = FileTransfer
    del FileTransfer

    _M_MediaFile.FileTransferPrx = FileTransferPrx
    del FileTransferPrx

# End of module MediaFile
